{"version":3,"sources":["webpack:///./shared/views/Footer/Footer.test.js","webpack:///readable-stream (ignored)","webpack:///util (ignored)","webpack:///util (ignored)?d4a3","webpack:///./util.inspect (ignored)"],"names":["describe","it","wrapper","mount","expect","find","toHaveLength","FOOTER_LINKS","length","forEach","footerLink","href","linkToLocation","text","toEqual","name","unmount","shallow","toMatchSnapshot"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEAA,QAAQ,CAAC,kBAAD,EAAqB,YAAM;AACjCC,IAAE,CAAC,uDAAD,EAA0D,YAAM;AAChE,QAAMC,OAAO,GAAGC,oDAAK,CACnB,2DAAC,6DAAD,QACE,2DAAC,wDAAD,OADF,CADmB,CAArB,CADgE,CAOhE;;AACAC,UAAM,CAACF,OAAO,CAACG,IAAR,CAAa,GAAb,CAAD,CAAN,CAA0BC,YAA1B,CAAuCC,sEAAY,CAACC,MAApD,EARgE,CAUhE;AACA;;AACAD,0EAAY,CAACE,OAAb,CAAqB,UAACC,UAAD,EAAgB;AACnCN,YAAM,CAACF,OAAO,CAACG,IAAR,CAAa;AAAEM,YAAI,EAAED,UAAU,CAACE;AAAnB,OAAb,EAAkDC,IAAlD,EAAD,CAAN,CAAiEC,OAAjE,WACKJ,UAAU,CAACK,IADhB;AAGD,KAJD;AAMAb,WAAO,CAACc,OAAR;AACD,GAnBC,CAAF;AAqBAf,IAAE,CAAC,mBAAD,EAAsB,YAAM;AAC5B,QAAMC,OAAO,GAAGe,sDAAO,CAAC,2DAAC,wDAAD,OAAD,CAAvB;AAEAb,UAAM,CAACF,OAAD,CAAN,CAAgBgB,eAAhB;AACD,GAJC,CAAF;AAKD,CA3BO,CAAR,C;;;;;;;;;;;ACPA,e;;;;;;;;;;;ACAA,e;;;;;;;;;;;ACAA,e;;;;;;;;;;;ACAA,e","file":"views-Footer-Footer-test.js","sourcesContent":["import { mount, shallow } from 'enzyme';\nimport React from 'react';\nimport { MemoryRouter } from 'react-router-dom';\n\nimport { FOOTER_LINKS } from '../../../data/views-schema/footer';\nimport Footer from './FooterComponent';\n\ndescribe('Footer component', () => {\n  it('has all navigation links defined in the footer schema', () => {\n    const wrapper = mount(\n      <MemoryRouter>\n        <Footer />\n      </MemoryRouter>\n    );\n\n    // Check if number of footer links is equivalent of links defined in footer schema\n    expect(wrapper.find('a')).toHaveLength(FOOTER_LINKS.length);\n\n    // Grab all link using their href property, and confirm their text matches to their respective\n    // values in footer schema.\n    FOOTER_LINKS.forEach((footerLink) => {\n      expect(wrapper.find({ href: footerLink.linkToLocation }).text()).toEqual(\n        `${footerLink.name}`\n      );\n    });\n\n    wrapper.unmount();\n  });\n\n  it('renders correctly', () => {\n    const wrapper = shallow(<Footer />);\n\n    expect(wrapper).toMatchSnapshot();\n  });\n});\n","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */"],"sourceRoot":""}