{"version":3,"sources":["webpack:///./shared/views/ErrorBoundary/ErrorBoundary.test.js","webpack:///readable-stream (ignored)","webpack:///util (ignored)","webpack:///util (ignored)?d4a3","webpack:///./util.inspect (ignored)"],"names":["ChildWithError","Error","swallowConsoleError","codeToRun","console","error","log","describe","it","wrapper","shallow","expect","toMatchSnapshot","test","mount","text","toEqual","unmount","spy","jest","spyOn","ErrorBoundary","prototype","toHaveBeenCalled","mock","calls","componentStack","mockClear","mockReset","mockRestore"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;;AAEA,SAASA,cAAT,GAA0B;AACxB,QAAMC,KAAK,CAAC,mBAAD,CAAX;AACD,C,CAED;AACA;;;AACA,SAASC,mBAAT,CAA6BC,SAA7B,EAAwC;AACtC;AADsC,iBAEfC,OAFe;AAAA,MAE9BC,KAF8B,YAE9BA,KAF8B;AAAA,MAEvBC,GAFuB,YAEvBA,GAFuB,EAItC;AACA;;AACAF,SAAO,CAACC,KAAR,GAAgB,YAAM,CAAE,CAAxB,CANsC,CAOtC;;;AACAD,SAAO,CAACE,GAAR,GAAc,YAAM,CAAE,CAAtB,CARsC,CAUtC;;;AACAH,WAAS,GAX6B,CAatC;AACA;;AACAC,SAAO,CAACC,KAAR,GAAgBA,KAAhB,CAfsC,CAgBtC;;AACAD,SAAO,CAACE,GAAR,GAAcA,GAAd;AACD;;AAEDC,QAAQ,CAAC,4BAAD,EAA+B,YAAM;AAC3CC,IAAE,CAAC,mBAAD,EAAsB,YAAM;AAC5B,QAAMC,OAAO,GAAGC,sDAAO,CAAC,2DAAC,+DAAD,OAAD,CAAvB;AAEAC,UAAM,CAACF,OAAD,CAAN,CAAgBG,eAAhB;AACD,GAJC,CAAF;AAMAC,MAAI,CAAC,kCAAD,EAAqC,YAAM;AAC7CX,uBAAmB,CAAC,YAAM;AACxB,UAAMO,OAAO,GAAGK,oDAAK,CACnB,2DAAC,+DAAD,QACE,2DAAC,cAAD,OADF,CADmB,CAArB;AAMA,UAAMC,IAAI,GAAGN,OAAO,CAACM,IAAR,EAAb;AAEAJ,YAAM,CAACI,IAAD,CAAN,CAAaC,OAAb,CAAqB,+DAArB;AAEAP,aAAO,CAACQ,OAAR;AACD,KAZkB,CAAnB;AAaD,GAdG,CAAJ;AAgBAJ,MAAI,CAAC,gCAAD,EAAmC,YAAM;AAC3CX,uBAAmB,CAAC,YAAM;AACxB,UAAMgB,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWC,+DAAa,CAACC,SAAzB,EAAoC,mBAApC,CAAZ;AAEA,UAAMb,OAAO,GAAGK,oDAAK,CACnB,2DAAC,+DAAD,QACE,2DAAC,cAAD,OADF,CADmB,CAArB;AAMAH,YAAM,CAACO,GAAD,CAAN,CAAYK,gBAAZ,GATwB,CAWxB;;AACAZ,YAAM,CAACO,GAAG,CAACM,IAAJ,CAASC,KAAT,CAAe,CAAf,EAAkB,CAAlB,CAAD,CAAN,CAA6BT,OAA7B,CACE;AACEU,sBAAc;AADhB,OADF;AASAR,SAAG,CAACS,SAAJ;AACAT,SAAG,CAACU,SAAJ;AACAV,SAAG,CAACW,WAAJ;AACApB,aAAO,CAACQ,OAAR;AACD,KAzBkB,CAAnB;AA0BD,GA3BG,CAAJ;AA4BD,CAnDO,CAAR,C;;;;;;;;;;;AC/BA,e;;;;;;;;;;;ACAA,e;;;;;;;;;;;ACAA,e;;;;;;;;;;;ACAA,e","file":"views-ErrorBoundary-ErrorBoundary-test.js","sourcesContent":["import { mount, shallow } from 'enzyme';\nimport React from 'react';\n\nimport ErrorBoundary from './ErrorBoundaryComponent';\n\nfunction ChildWithError() {\n  throw Error('Intentional error');\n}\n\n// There are console error and log messages which are typically useful, but can be suppressed\n// because we intentionally introduced an error.\nfunction swallowConsoleError(codeToRun) {\n  // Copy console.error and console.log implementation in temporary variables\n  const { error, log } = console;\n\n  // Assign console.error and console.log to empty arrow functions.\n  // eslint-disable-next-line no-console\n  console.error = () => {};\n  // eslint-disable-next-line no-console\n  console.log = () => {};\n\n  // Run the code that shows console error and log messages\n  codeToRun();\n\n  // Reimplement the orginal console.error and console.log implementation\n  // eslint-disable-next-line no-console\n  console.error = error;\n  // eslint-disable-next-line no-console\n  console.log = log;\n}\n\ndescribe('\"Error boundary\" component', () => {\n  it('Renders correctly', () => {\n    const wrapper = shallow(<ErrorBoundary />);\n\n    expect(wrapper).toMatchSnapshot();\n  });\n\n  test('Shows the correct error message.', () => {\n    swallowConsoleError(() => {\n      const wrapper = mount(\n        <ErrorBoundary>\n          <ChildWithError />\n        </ErrorBoundary>\n      );\n\n      const text = wrapper.text();\n\n      expect(text).toEqual('Something went wrong. Please refresh the page, and try again.');\n\n      wrapper.unmount();\n    });\n  });\n\n  test('Shows the correct error stack.', () => {\n    swallowConsoleError(() => {\n      const spy = jest.spyOn(ErrorBoundary.prototype, 'componentDidCatch');\n\n      const wrapper = mount(\n        <ErrorBoundary>\n          <ChildWithError />\n        </ErrorBoundary>\n      );\n\n      expect(spy).toHaveBeenCalled();\n\n      // prettier-ignore\n      expect(spy.mock.calls[0][1]).toEqual(\n        {\n          componentStack: `\n    in ChildWithError\n    in ErrorBoundaryComponent (created by WrapperComponent)\n    in WrapperComponent`\n        }\n      );\n\n      spy.mockClear();\n      spy.mockReset();\n      spy.mockRestore();\n      wrapper.unmount();\n    });\n  });\n});\n","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */"],"sourceRoot":""}